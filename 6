#include <stdio.h>
#include <time.h>
#include <omp.h>

long long num_steps = 1000000000;
double step;

int main(int argc, char* argv[])
{
	clock_t start, stop;
	double x, pi = 0, sum = 0.0;
	const int numthr = 4;
	double tab[numthr] = {0, 0, 0, 0};
	int i;
	step = 1. / (double)num_steps;
	start = clock();
	omp_set_num_threads(numthr);
#pragma omp parallel for
	for (i = 0; i < num_steps; i++)
	{
		x = (i + .5) * step;
		tab[omp_get_thread_num()] = tab[omp_get_thread_num()] + 4.0 / (1. + x * x);
	}
	for (int i = 0; i < numthr; i++)
	{
		pi += tab[i] * step;
	}
	stop = clock();
	printf("Wartosc liczby PI wynosi %15.12f\n", pi);
	printf("Czas przetwarzania wynosi %f sekund\n", ((double)(stop - start) / 1000.0));
	return 0;
}
